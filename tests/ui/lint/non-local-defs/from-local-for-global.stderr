warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/from-local-for-global.rs:8:5
   |
LL |     impl From<Cat> for () {
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current function `main`
  --> $DIR/from-local-for-global.rs:8:5
   |
LL | /     impl From<Cat> for () {
LL | |
LL | |         fn from(_: Cat) -> () {
LL | |             todo!()
LL | |         }
LL | |     }
   | |_____^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>
   = note: `#[warn(non_local_definitions)]` on by default

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/from-local-for-global.rs:18:5
   |
LL |     impl From<Wrap<Wrap<Elephant>>> for () {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current function `main`
  --> $DIR/from-local-for-global.rs:18:5
   |
LL |       impl From<Wrap<Wrap<Elephant>>> for () {
   |       ^                   -------- may need to be moved as well
   |  _____|
   | |
LL | |
LL | |         fn from(_: Wrap<Wrap<Elephant>>) -> Self {
LL | |             todo!()
LL | |         }
LL | |     }
   | |_____^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/from-local-for-global.rs:32:5
   |
LL |     impl StillNonLocal for &Foo {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current function `only_global`
  --> $DIR/from-local-for-global.rs:32:5
   |
LL |     impl StillNonLocal for &Foo {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^---^^^
   |                             |
   |                             may need to be moved as well
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/from-local-for-global.rs:40:5
   |
LL |     impl From<Local1> for GlobalSameFunction {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current function `same_function`
  --> $DIR/from-local-for-global.rs:40:5
   |
LL |       impl From<Local1> for GlobalSameFunction {
   |       ^         ------ may need to be moved as well
   |  _____|
   | |
LL | |
LL | |         fn from(x: Local1) -> GlobalSameFunction {
LL | |             x.0
LL | |         }
LL | |     }
   | |_____^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/from-local-for-global.rs:48:5
   |
LL |     impl From<Local2> for GlobalSameFunction {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current function `same_function`
  --> $DIR/from-local-for-global.rs:48:5
   |
LL |       impl From<Local2> for GlobalSameFunction {
   |       ^         ------ may need to be moved as well
   |  _____|
   | |
LL | |
LL | |         fn from(x: Local2) -> GlobalSameFunction {
LL | |             x.0
LL | |         }
LL | |     }
   | |_____^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: 5 warnings emitted

