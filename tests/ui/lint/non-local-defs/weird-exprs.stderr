warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:8:5
   |
LL |     impl Uto for *mut Test {}
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>`
  --> $DIR/weird-exprs.rs:8:5
   |
LL |     impl Uto for *mut Test {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>
   = note: `#[warn(non_local_definitions)]` on by default

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:16:9
   |
LL |         impl Uto for Test {}
   |         ^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>`
  --> $DIR/weird-exprs.rs:16:9
   |
LL |         impl Uto for Test {}
   |         ^^^^^^^^^^^^^^^^^^^^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:25:9
   |
LL |         impl Test {
   |         ^^^^^^^^^
   |
   = note: methods and associated constants are still usable outside the current expression, only `impl Local` and `impl dyn Local` can ever be private, and only if the type is nested in the same item as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>` and up 2 bodies
  --> $DIR/weird-exprs.rs:25:9
   |
LL | /         impl Test {
LL | |
LL | |             fn bar() {}
LL | |         }
   | |_________^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:34:9
   |
LL |         impl Uto for &Test {}
   |         ^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>` and up 2 bodies
  --> $DIR/weird-exprs.rs:34:9
   |
LL |         impl Uto for &Test {}
   |         ^^^^^^^^^^^^^^^^^^^^^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:41:9
   |
LL |         impl Uto for &(Test,) {}
   |         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>` and up 2 bodies
  --> $DIR/weird-exprs.rs:41:9
   |
LL |         impl Uto for &(Test,) {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, `impl` blocks should be written at the same level as their item
  --> $DIR/weird-exprs.rs:48:9
   |
LL |         impl Uto for &(Test,Test) {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `impl` may be usable in bounds, etc. from outside the expression, which might e.g. make something constructible that previously wasn't, because it's still on a publicly-visible type
   = note: an `impl` is never scoped, even when it is nested inside an item, as it may impact type checking outside of that item, which can be the case if neither the trait or the self type are at the same nesting level as the `impl`
help: move this `impl` block outside of the current constant expression `<unnameable>` and up 2 bodies
  --> $DIR/weird-exprs.rs:48:9
   |
LL |         impl Uto for &(Test,Test) {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: 6 warnings emitted

